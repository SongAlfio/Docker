-d -   #以分离模式运行容器（在后台）
-p 80:80 -   #将主机的端口80映射到容器中的端口80
docker/getting-started -   #要使用的图像
-t   #标记了我们的图像。可以简单地将其视为最终图像的易于理解的名称。
-dp 3000:3000-    #和之前一样。在分离（后台）模式下运行并创建端口映射
--network todo-app \   #Permette al todo-app di collegarsi alla rete
-w /app -   #设置命令将运行的“工作目录”或当前目录
-e MYSQL_ROOT_PASSWORD=secret \   #Serve per dichiarare i variabili dell’ambiente
-v "$(pwd):/app"-   #从容器中的主机将当前目录绑定安装到/app目录中
node:12-alpine-   #要使用的图像。请注意，这是来自Dockerfile的应用程序的基本映像
sh -c "yarn install && yarn run dev"-    #命令。我们正在使用sh（没有alpine bash）启动shell并运行yarn install以安装所有依赖项，然后运行yarn run dev。如果查看package.json，我们将看到dev脚本正在启动nodemon。
mysql:5.7 (https://hub.docker.com/_/mysql)   #è il link corrispondente del dockerfile 5.7
